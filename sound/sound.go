package sound

import (
	"galuma.net/synthetic/wave"
	"github.com/gopxl/beep"
)

// -------------------------------------------------------------
// Sound implements the beep.Streamer interface (Stream and Err
// functions) for playing a Sound with a limited duration.
type Sound struct {
	TotalSamples []float64
	Processed    int
}

func (s *Sound) Stream(samples [][2]float64) (int, bool) {
	if s.Processed >= len(s.TotalSamples) {
		return 0, false
	}

	if len(s.TotalSamples)-s.Processed < len(samples) {
		samples = samples[:len(s.TotalSamples)-s.Processed]
	}

	for i := range samples {
		samples[i][0] = s.TotalSamples[s.Processed+i]
		samples[i][1] = s.TotalSamples[s.Processed+i]
	}

	s.Processed += len(samples)

	return len(samples), true
}

func (s *Sound) Err() error {
	return nil
}

// -------------------------------------------------------------
// Factory functions

// NewSound can be used to create a beep streamer playing the given signal
func NewSound(samples []float64) beep.Streamer {
	return &Sound{samples, 0}
}

// SynthSound can be used to synthesize a sound, i.e. create a beep
// streamer playing a signal generated by the specified synthetizer on
// the specified duration.
func SynthSound(duration float64, synthetizer wave.Synthesizer) beep.Streamer {
	return &Sound{synthetizer.Synthesize(duration), 0}
}
